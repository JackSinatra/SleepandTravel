
/* Mixin for fluid floating boxes*/

@mixin rowMachine($numPerRow, $margin) {
    width: ((100% - (($numPerRow - 1) * $margin)) / $numPerRow);
    &:nth-child(n) {
        margin-right: $margin;
        margin-bottom: $margin;
    }
    &:nth-child(#{$numPerRow}n) {
        margin-right: $margin;
        margin-bottom: $margin;
    }
}

@mixin pseudo($display: block, $pos: absolute, $content: ''){
    content: $content;
    display: $display;
    position: $pos;
}

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

/* input,*/
/* textarea {*/
/*     @include input-placeholder {*/
/*         color: $grey;*/
/*     }*/
/* }*/

    @mixin font($font-name,$font-weight) {
        font-family: '$font-name';
        font-weight: $font-weight;
    }
    %font-primary {
        @include font(Roboto,400);
    }


  @mixin weight($weight) {
       @if $weight == light{
          font-weight:300;
      }
      @else if $weight == italic {
           font-weight:400;
           font-style:italic;
      }
      @else if $weight == light-italic {
           font-weight:300;
           font-style:italic;
      }
      @else if $weight == regular{
           font-weight:400;
      }
      @else if $weight == semi-bold {
           font-weight:600;
      }
      @else if $weight == bold {
           font-weight:700;
      }
      @else if $weight == black {
           font-weight:900;
      }
  }

  @mixin font($size,$weight,$line-height){
    @include rem($size);
    @include weight($weight);
    line-height:1.3;
    line-height:$line-height;
  }

  /* Rem mixin*/

  /* ----*/
/* libsass (v3.2.5)*/
/* ----*/

$rem-baseline: 16px !default;
$rem-fallback: true !default;
$rem-px-only: false !default;

/* list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)*/
@function rem-separator($list) {
  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / ($rem-baseline / 1rem), $separator);
    } @else if type-of($value) == "list" {
      $result: append($result, rem-convert($to, $value...), $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}


@function calculateRem($size) {
  $remSize: $size / 16;
  @return #{$remSize}rem;
}

@mixin fontSize($size,$weight) {
  font-size: $size+px;
  font-size: calculateRem($size);
  @include weight($weight);
}

@mixin fontRem($size){
  font-size:$size+px;
  font-size: calculateRem($size);
}
